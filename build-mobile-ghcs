#!/bin/bash
set -e
# set -x

help_text() {
    echo "Usage:
  ${0##*/} [-h][-d] --prefix=... --iconv=... --libffi=... --clang=... [target1 target2 target3]

Options:

  -h, --help
    display this help and exit

  -d, --debug
    show set values

  --no-clean
    do not clean the tree before building

  --no-configure
    do not run ./boot or ./configure

  --prefix=<prefix>
    the prefix to pass to configure

  --iconv=<iconv>
    path to iconv.

  --libffi=<libffi>
    path to libffi.

  --clang=<clang>
    path to the clang binary to use
    defaults to `clang`"
}

# -----------------------------------------------------------------------------
# Helper functions
function cabal_with_new_autoconfig () {
    cabal=$1
    pkg=$2
    echo "Building $pkg..."
    CABAL_FLAGS=
    case $pkg in
        *-head) CABAL_FLAGS+=" --source-repository=head"; pkg="${pkg%-*}";;
        *) pkg=$pkg
    esac
    tmp_dir=$(mktemp -d)
    (
        cd $tmp_dir
        # use system cabal to get the package, until we are certain that $cabal
        # supports get properly.
        cabal get $pkg $CABAL_FLAGS || true
        (
            cd $pkg*
            # this is rather annoying, but until the upstream pacakges include
            # update config.{guess,sub}, we'll need this hack to make -ios work.
            curl -L -o config.guess "http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess"
            curl -L -o config.sub "http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub"
            $cabal install --force-reinstalls
        )
    )
    rm -fR $tmp_dir
}
# -----------------------------------------------------------------------------


CLEAN=1 # clean prior to building
CONFIGURE=1 # run ./configure
BUILD=1 # run make
DEBUG=0 # debug values
DEVEL=0 # Use development snapshot (fro the cross compiler only...)
CLANG=

while [ "$#" -gt 0 ]; do
    case "$1" in
        --no-clean) CLEAN=0; shift 1;;
        --no-configure) CONFIGURE=0; shift 1;;
        --no-build) BUILD=0; shift 1;;
        --with-devel) DEVEL=1; shift 1;;
        --prefix=*) PREFIX="${1#*=}"; shift 1;;
        --iconv=*) ICONV="${1#*=}"; shift 1;;
        --libffi=*) LIBFFI="${1#*=}"; shift 1;;
        --clang=*) CLANG="${1#*=}"; shift 1;;
        -d|--debug) DEBUG=1; shift 1;;
        -h|--help) help_text; exit;;
        -*) echo "unknown option: $1" >&2; exit 1;;
        *) args+="$1"; shift 1;;
    esac
done

TARGETS=${args:-"host armv7-android aarch64-android aarch64-ios x86_64-ios arm-raspberrypi"}
if [ $DEBUG -eq 1 ]; then
    echo "   PREFIX=$PREFIX"
    echo "    ICONV=$ICONV"
    echo "    CLANG=$CLANG"
    echo "  TARGETS=$TARGETS"
    echo "    CLEAN=$CLEAN"
    echo "CONFIGURE=$CONFIGURE"
    echo "    BUILD=$BUILD"
    echo "    DEVEL=$DEVEL"
    exit
fi

USE_DEVEL_FLAGS=" --enable-bootstrap-with-devel-snapshot" # --with-ghc=${PREFIX}/bin/ghc"

for target in $TARGETS
do
    echo "TARGET: $target"
    CONFIGURE_FLAGS="--prefix=${PREFIX} --disable-large-address-space" 
    CABAL="cabal"
    CROSS=1

    case $target in
        host)
            MK_FLAVOUR="quick"
            CROSS=0
            ;;
        armv7-android)
            CONFIGURE_FLAGS+=" --target=armv7-linux-androideabi"
            CONFIGURE_FLAGS+=" --with-iconv-includes=$ICONV/arm-linux-androideabi/include"
            CONFIGURE_FLAGS+=" --with-iconv-libraries=$ICONV/arm-linux-androideabi/lib"
            CONFIGURE_FLAGS+=" --with-system-libffi"
            CONFIGURE_FLAGS+=" --with-ffi-includes=$LIBFFI/armv7-linux-androideabi/include"
            CONFIGURE_FLAGS+=" --with-ffi-libraries=$LIBFFI/armv7-linux-androideabi/lib"
            MK_FLAVOUR="quick-cross-ng"
            CABAL=armv7-linux-androideabi-cabal
            ;;
        aarch64-android)
            CONFIGURE_FLAGS+=" --target=aarch64-linux-android"
            CONFIGURE_FLAGS+=" --with-iconv-includes=$ICONV/aarch64-linux-android/include"
            CONFIGURE_FLAGS+=" --with-iconv-libraries=$ICONV/aarch64-linux-android/lib"
            MK_FLAVOUR="quick-cross-ng"
            CABAL=aarch64-linux-android-cabal
            ;;
        aarch64-ios)
            CONFIGURE_FLAGS+=" --target=aarch64-apple-ios"
            CONFIGURE_FLAGS+=" --with-system-libffi"
            CONFIGURE_FLAGS+=" --with-ffi-includes=$LIBFFI/aarch64-apple-ios/include"
            CONFIGURE_FLAGS+=" --with-ffi-libraries=$LIBFFI/aarch64-apple-ios/lib"
            MK_FLAVOUR="quick-cross-ng"
            CABAL=aarch64-apple-ios-cabal
            ;;
        x86_64-ios)
            CONFIGURE_FLAGS+=" --target=x86_64-apple-ios"
            CONFIGURE_FLAGS+=" --with-system-libffi"
            CONFIGURE_FLAGS+=" --with-ffi-includes=$LIBFFI/x86_64-apple-ios/include"
            CONFIGURE_FLAGS+=" --with-ffi-libraries=$LIBFFI/x86_64-apple-ios/lib"
            MK_FLAVOUR="quick-cross-ng"
            CABAL=x86_64-apple-ios-cabal
            ;;
        arm-raspberrypi)
            CONFIGURE_FLAGS+=" --target=arm-linux-gnueabihf"
            CONFIGURE_FLAGS+=" --with-system-libffi"
            CONFIGURE_FLAGS+=" --with-ffi-includes=$LIBFFI/arm-linux-gnueabihf/include"
            CONFIGURE_FLAGS+=" --with-ffi-libraries=$LIBFFI/arm-linux-gnueabihf/lib"
            MK_FLAVOUR="quick-cross-ng"
            CABAL=arm-linux-gnueabihf-cabal
            ;;
        *)
            exit "unknown target"
            ;;
    esac

    if [ $CLEAN -eq 1 ]; then

        git clean -x --force -d --quiet
        git reset --hard HEAD
        make --silent clean && make -s distclean

        cat mk/build.mk.sample|sed -E "s/^#BuildFlavour[ ]+= ${MK_FLAVOUR}$/BuildFlavour = ${MK_FLAVOUR}/" > mk/build.mk
        # force -fPIC, otherwise at least aarch64 will break.
        echo "SRC_HC_OPTS += -fPIC" >> mk/build.mk
        # boot after mk/build.mk, to silence the warning about a missing mk/build.mk
        ./boot > /dev/null
    fi

    echo "=== mk/build.mk ==="
    cat mk/build.mk|grep -v "^#"|grep -v "^$"
    echo "==================="
    # DYNAMIC_BY_DEFAULT doesn't work on iOS
    #    echo "DYNAMIC_BY_DEFAULT = YES" >> mk/build.mk
    # DYNAMIC_GHC_PROGRAMS and DYNAMIC_TOO works on iOS, when compiling on macOS.
    #    echo "DYNAMIC_GHC_PROGRAMS = YES" >> mk/build.mk
    #    echo "DYNAMIC_TOO = YES" >> mk/build.mk
    if [ $DEVEL -eq 1 ]; then
        echo "Adding devel snapshot flags..."
        CONFIGURE_FLAGS+=$USE_DEVEL_FLAGS
        echo $CONFIGURE_FLAGS
    fi
    if [ $CONFIGURE -eq 1 ]; then
        echo "Configuring $target..."
        echo "CC=$CLANG ./configure --silent $CONFIGURE_FLAGS"
        CC=$CLANG ./configure --silent $CONFIGURE_FLAGS
    fi
    if [ $BUILD -eq 1 ]; then
        echo "Building $target..."
        make --silent -j8
        echo "Installing $target..."
        make --silent install
        echo "Building and installing iserv for $target..."
    fi
    cd iserv
    PATH=$PREFIX/bin:$PATH $CABAL update
    if [ $CROSS -eq 1 ]; then
        PATH=$PREFIX/bin:$PATH $CABAL install -flibrary
    else
        PATH=$PREFIX/bin:$PATH $CABAL install -flibrary -fproxy
    fi
    cd ..
    echo "TARGET: $target done."
    GITREV=$(git rev-parse --short HEAD)
    mkdir -p "../ghc-bindist/${GITREV}"
    BINARY_DIST_DIR="../ghc-bindist/${GITREV}/" make binary-dist
done
